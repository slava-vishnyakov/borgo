name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          
          # Extract version numbers
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          echo "current_major=${major}" >> $GITHUB_OUTPUT
          echo "current_minor=${minor}" >> $GITHUB_OUTPUT
          echo "current_patch=${patch}" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          major=${{ steps.get_latest_tag.outputs.current_major }}
          minor=${{ steps.get_latest_tag.outputs.current_minor }}
          patch=${{ steps.get_latest_tag.outputs.current_patch }}
          
          case "${{ github.event.inputs.bump_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="v${major}.${minor}.${patch}"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          new_version=${{ steps.new_version.outputs.new_version }}
          git tag -a "${new_version}" -m "Release ${new_version}"
          git push origin "${new_version}"

      - name: Print Summary
        run: |
          echo "Previous version: ${{ steps.get_latest_tag.outputs.latest_tag }}"
          echo "New version: ${{ steps.new_version.outputs.new_version }}" 