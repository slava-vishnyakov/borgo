name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.new_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest version tag (starting with 'v'), default to v0.0.0 if none exists
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n1 || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          
          # Extract version numbers
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          echo "current_major=${major}" >> $GITHUB_OUTPUT
          echo "current_minor=${minor}" >> $GITHUB_OUTPUT
          echo "current_patch=${patch}" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          major=${{ steps.get_latest_tag.outputs.current_major }}
          minor=${{ steps.get_latest_tag.outputs.current_minor }}
          patch=${{ steps.get_latest_tag.outputs.current_patch }}
          
          case "${{ github.event.inputs.bump_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="v${major}.${minor}.${patch}"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          new_version=${{ steps.new_version.outputs.new_version }}
          git tag -a "${new_version}" -m "Release ${new_version}"
          git push origin "${new_version}"

      - name: Print Summary
        run: |
          echo "Previous version: ${{ steps.get_latest_tag.outputs.latest_tag }}"
          echo "New version: ${{ steps.new_version.outputs.new_version }}"

  create-release:
    needs: bump-version
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            binary_name: borgo-linux-x86_64
            src_name: compiler
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: borgo-macos-x86_64
            src_name: compiler
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: borgo-macos-aarch64
            src_name: compiler
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: borgo-windows-x86_64.exe
            src_name: compiler.exe

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump-version.outputs.new_version }}

      # Setup for Unix platforms (Linux and macOS)
      - name: Install Nix
        if: runner.os != 'Windows'
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
        if: runner.os != 'Windows'

      # Setup for Windows
      - name: Install Rust (Windows)
        if: runner.os == 'Windows'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: borgo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # Build steps for Unix platforms
      - name: Add Rust target (Unix)
        if: runner.os != 'Windows'
        run: |
          rustup target add ${{ matrix.target }}

      - name: Build release binary (Unix)
        if: runner.os != 'Windows'
        run: |
          # Install cross-compilation tools if needed
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            rustup target add aarch64-apple-darwin
          fi
          
          # Build using cargo directly for cross-compilation
          cargo build --release --target ${{ matrix.target }}

      # Build step for Windows
      - name: Build release binary (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Install Apple Certificate (macOS)
        if: runner.os == 'macOS'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Sign and Notarize (macOS)
        if: runner.os == 'macOS'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Sign the binary
          codesign --force --options runtime --sign "Developer ID Application: $APPLE_TEAM_ID" --timestamp "${{ matrix.binary_name }}"

          # Create ZIP for notarization
          ditto -c -k --keepParent "${{ matrix.binary_name }}" "${{ matrix.binary_name }}.zip"

          # Submit for notarization and store submission ID
          SUBMISSION_ID=$(xcrun notarytool submit "${{ matrix.binary_name }}.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --output-format json | jq -r '.id')

          echo "Notarization submission ID: $SUBMISSION_ID"

          # Wait for notarization to complete
          while true; do
            STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --output-format json | jq -r '.status')
            
            echo "Notarization status: $STATUS"
            
            if [ "$STATUS" = "Accepted" ]; then
              break
            elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
              echo "Notarization failed"
              xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_APP_SPECIFIC_PASSWORD" \
                --team-id "$APPLE_TEAM_ID"
              exit 1
            fi
            
            echo "Waiting for notarization to complete..."
            sleep 30
          done

          # Staple the notarization ticket to the binary
          xcrun stapler staple "${{ matrix.binary_name }}"

          # Create final zip with notarized binary
          ditto -c -k --keepParent "${{ matrix.binary_name }}" "${{ matrix.binary_name }}.zip"

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.src_name }} ${{ matrix.binary_name }}
          chmod +x ${{ matrix.binary_name }}

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\${{ matrix.src_name }} ${{ matrix.binary_name }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_version }}
          name: Release ${{ needs.bump-version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ matrix.binary_name }}* 